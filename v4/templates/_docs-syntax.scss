//=> {% macro get(componentName) %}
//=> {% if componentName === "grid_syntax" %}
@mixin grid( (
  'column': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px)
  'condition': 'min' | 'max',
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ...,
  'direction': 'LTR' | 'RTL',
  'keep': boolean
  ) )

//=> {% elif componentName === "liquid_syntax" %}
@mixin liquid( (
  'column': list | map, // ('auto' 200px) | (640px: ('auto' 200px), 900px: ('auto' 300px))
  'gutter': px | em | rem | %, 
  'selector': string | list, // 'li' | ('main' 'aside') 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': 'LTR' | 'RTL'
  ) )

//=> {% elif componentName === "holygrail_syntax" %}
@mixin holy-grail( (
  'column': list | map, // ('auto' 100px 250px) | (900px: (100px 'auto' 250px))
  'gutter': px | em | rem | %, 
  'selector': string | list, // 'li' | ('nav' 'main' 'aside')  
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': 'LTR' | 'RTL'
  ) )

//=> {% elif componentName === "gallery_syntax" %}
@mixin gallery( (
  'column': integer | map, // 3 | ('dafault': 2, 600px: 3, 900px: 4)
  'gutter': px | em | rem | %, 
  'selector': string, // 'li'
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': 'LTR' | 'RTL',
  'keep': boolean
  ) )

//=> {% elif componentName === "masonry_syntax" %}
@mixin masonry( (
  'column': integer | map, // 3 | ('dafault': 2, 600px: 3, 900px: 4)
  'gutter': px | em | rem | %, 
  'selector': string, // 'li' 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ...,
  'keep': boolean
  ) )

// *** fallback: IE9- *** //
.lt-ie10 {
  .masonry {
    text-align: center;
    > li {
      display: inline-block;
      vertical-align: top;
      width: 250px;
      margin: 0 20px 20px 0;
      text-align: left;
    }
  }
}

//=> {% elif componentName === "metro_syntax" %}
@mixin metro( (
  'column': list | map, // (w1 w3 h2 w4 of 5) | (600px: w6h1 w2h2 w4h2 of 6)
  'ratio': num, // (9/16) 
  'gutter': px | em | rem | %, 
  'selector': string, // 'div'
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'keep': boolean
  ) )

//=> {% elif componentName === "diamond_syntax" %}
@mixin diamond( ( 
  'column': integer | % | px | em | ... | map, // 3 | 25% | (600px:3, 800px:4) | (600px:33.33%, 800px:25%), interger => item count, % | px | em | ... => item width
  'shape': 'diamond' | 'octagon',  
  'tight': boolean, 
  'keep': boolean
) )

//=> {% elif componentName === "anglededges_syntax" %}
@mixin angled-edges( (
  'edge': 'top' | 'bottom' | 'both', 
  'angle': deg,
  'color': color,
  'flip': boolean
) );

//=> {% elif componentName === "justify_syntax" %}
@mixin justify( (
  'selector': string // 'div' (optional)
) )

//=> {% elif componentName === "center_syntax" %}
@mixin center( (
  'selector': string // 'div' (optional)
) )

//=> {% elif componentName === "chart_syntax" %}
@mixin chart( (
  'data': map, // (#0080FF: 8.9 10.5 19.3 21.45, #FF8000: 5 10 16 22, #666666: 10.7 12 12 18)
  'style': 'bar' | 'column',
  'bar-height': px | em | rem, 
  'bar-gap': px | em | rem, // Required if style is 'bar' 
  'steps': list, // (5 100) => (scale full-size)
  'gutter': px | em | rem | %, 
  'tick-line-color': color, // default: #e7e7e7
  'hide': list, // ('units' 'labels' 'numbers') 
  'animation': boolean, 
  'duration': s,
  'timing-function': string // 'ease'
) )

//=> {% elif componentName === "responsivetable_syntax" %}
// rp-table() for shorthand
@mixin responsive-table( (
  'style': 'flip-scroll' | 'scroll' | 'toggle' | 'stack',
  'breakpoint': integer | px | em | rem | %, 
  'count': integer, // column count, for 'toggle' style
  'data': list, // Required for 'stack' style. <th> content, e.g. ("First Name", "Last Name", "Job Title", "Favorite Color", "Wars or Trek?", "Porn Name", "Date of Birth", "Dream Vacation City", "GPA", "Arbitrary Data")
  'border-color': color, // Required for 'stack' style
  'th-width': % // for 'stack' style
) ) { 
  @content;
}

//=> {% elif componentName === "offcanvas_syntax" %}
@mixin off-canvas( (
  'style': 'slide-in' | 'slide-along' | 'slide-out' | 'rotate-in' | 'rotate-out' | 'rotate-in-reverse' | 'scale-down' | 'scale-up' | 'open-door' | 'push' | 'reveal' | 'drawer'
  'page': string, // '.page'
  'nav': string, // '.site-nav'
  'submenu': boolean,
  'nav-size': px | em | rem | %,
  'direction': 'left' | 'right' | 'top' | 'bottom',
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px)
  'overlay-color': color,
  'duration': s,
  'tops': map // Required if style is 'drawer'. The top positions of the nav. e.g. (500px: 20px, 768px: 30px, 1025: 40px)
) )
// For styles: slide-in, rotate-in, rotate-out, rotate-in-reverse, push and drawer, nav can be put inside ".page".

//=> {% elif componentName === "validation_syntax" %}
@mixin validation( (
  'style': 'normal' | 'fade-in' | 'slide-in', 
  'direction': 'left' | 'right' | 'top' | 'bottom',
  'shake': boolean,
  'z-index': integer,
  'speed': s,
  'duration': s,
  'default': boolean
) )

//=> {% elif componentName === "button_syntax" %}
@mixin button( (
  'style': 'highlight' | 'simple' | 'slide' | 'ripple' | 'veil' | 'push' | 'cut' | 'bubble' | 'line-drawing',
  'color': color | list, // (#2B8ACF #52cfdb)
  'selector': string, // switch button styles by adding this selector
  'direction': 'left' | 'right' | 'top' | 'bottom' | 'horizontal' | 'vertical',
  'duration': s, 
  'timing-function': string // ease
) )

//=> {% elif componentName === "parallelogram_syntax" %}
@mixin parallelogram( (
  'color': color,
  'angle': deg
) )

//=> {% elif componentName === "dropshadow_syntax" %}
@mixin drop-shadow( (
  'style': 'lifted' | 'raised' | 'perspective' | 'curve', 
  'direction': 'left' | 'right' | 'top' | 'bottom' | 'horizontal' | 'vertical',
  'color': color, 
  'shadow-size': px | em | rem
) )

//=> {% elif componentName === "switch_syntax" %}
@mixin switch( (
  'style': 'toggle' | 'slider', 
  'color': color | list, 
  'size': px | em | rem, 
  'text' list, // ('on' 'off')
  'border-radius': px | em | rem | %
) )

//=> {% elif componentName === "pushtoggle_syntax" %}
@mixin push-toggle() {
  // Active styles go here
  @content;
}

//=> {% elif componentName === "checkbox_syntax" %}
@mixin checkbox() {
  // unchecked styles go here
  @content;
}

@mixin checkbox-active() {
  // checked styles go here
  @content;
}

//=> {% elif componentName === "inputfile_syntax" %}
@mixin input-file() {
  @content;
}

//=> {% elif componentName === "tab_syntax" %}
@mixin tab( (
  'style': 'normal' | 'carousel' | 'customize',
  'count': integer 
) )

@mixin tab-active((
  'count': integer
))

@mixin tab-panel-active((
  'count': integer
))

//=> {% elif componentName === "accordion_syntax" %}
@mixin accordion( (
  'selector': string, // 'div' 
  'max-height': px | em | rem, 
  'duration': s
) )

//=> {% elif componentName === "dropdown_syntax" %}
@mixin dropdown( (
  'style': 'display' | 'scale' | 'rotate',
  'selector': string, // 'ul'
  'activate': 'hover' | 'click', 
  'direction': 'left' | 'right',
  'duration': s, 
  'default': boolean
) )

//=> {% elif componentName === "tooltip_syntax" %}
@mixin tooltip( (
  'direction': 'left' | 'right' | 'top' | 'bottom',
  'color': color, 
  'content': string, // optional
  'border-radius': px | em | rem | %
) )

//=> {% elif componentName === "flexmedia_syntax" %}
@mixin flex-media( (
  'ratio': float | %, // 0.56 | 56%
  'selector': string // 'iframe'
) )

//=> {% elif componentName === "fluidtype_syntax" %}
@mixin fluid-type( (
  'property': 'font-size' | 'margin' | 'padding', 
  'breakpoint': map // (320px: 18px, 1024px: 24px)
) )

//=> {% elif componentName === "hidetext_syntax" %}
@mixin hide-text();
%hide-text {};

//=> {% elif componentName === "robreakpoint_syntax" %}
@mixin ro-breakpoint( (
  'breakpoint': integer | list, // 600 | (600 900)
  'condition': 'min' | 'max',
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'feature': 'width' | 'height'
) )

//=> {% elif componentName === "atleast_syntax" %}
@mixin at-least( (
  'selector': string, // 'li' 
  'count': integer
) ) {
  @content;
}

//=> {% elif componentName === "atmost_syntax" %}
@mixin at-most( (
  'selector': string, // 'li' 
  'count': integer
) ) {
  @content;
}

//=> {% elif componentName === "equalto_syntax" %}
@mixin equal-to( (
  'selector': string, // 'li' 
  'count': integer
) ) {
  @content;
}

//=> {% elif componentName === "between_syntax" %}
@mixin between( (
  'selector': string, // 'li' 
  'count': list // (3 6)
) ) {
  @content;
}

//=> {% elif componentName === "contrast_syntax" %}
@function contrast( (
  'color': color,
  'light': color, 
  'dark': color
) )

//=> {% elif componentName === "adjacent_syntax" %}
@function adjacent( (
  'color': color, 
  'count': integer, // 30 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% elif componentName === "complementary_syntax" %}
@function complementary( (
  'color': color, 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% elif componentName === "splitcomplementary_syntax" %}
@function split-complementary( (
  'color': color, 
  'count': integer, // 30 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% elif componentName === "triad_syntax" %}
@function triad( (
  'color': color, 
  'count': integer, // 30 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% elif componentName === "rectangle_syntax" %}
@function rectangle( (
  'color': color, 
  'count': integer, // 30 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% elif componentName === "square_syntax" %}
@function square( (
  'color': color, 
  'count': integer, // 30 
  'saturation': %,
  'lightness': %,
  'scale': integer // 30
) )

//=> {% endif %}
//=> {% endmacro %}