//=> {% macro get(componentName) %}
//=> {% if componentName === "container_syntax" %}
@mixin container($container ('gutter' $gutter) $alignment)
// $container: px | em | %
// $gutter: px | em | %
// $alignment: left | right | center

//=> {% elif componentName === "grid_syntax" %}
@mixin grid($column ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media $direction 'keep')
// $column: list | map
// $selector: string (child element selector, default "div")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)
// $direction: LTR | RTL

//=> {% elif componentName === "liquid_syntax" %}
@mixin liquid($column ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media $direction)
// $column: list | map
// $selector: string (child element selector, default "div")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)
// $direction: 'LTR' | 'RTL'

//=> {% elif componentName === "holygrail_syntax" %}
@mixin holy-grail($column ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media $direction)
// $column: list | map
// $selector: string (child element selector, default "div")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)
// $direction: LTR | RTL

//=> {% elif componentName === "gallery_syntax" %}
@mixin gallery($column ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media $direction 'center-align' 'keep');
// $column: number | map
// $selector: string (child element selector, default "li")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)
// $direction: LTR | RTL

//=> {% elif componentName === "masonry_syntax" %}
@mixin masonry($column ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media 'keep');
// $column: number | map
// $selector: string (child element selector, default "li")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)

// *** fallback: IE9- *** //
.no-csscolumns {
  .masonry {
    text-align: center;
    > li {
      display: inline-block;
      vertical-align: top;
      width: 250px;
      margin: 0 20px 20px 0;
      text-align: left;
    }
  }
}

//=> {% elif componentName === "metro_syntax" %}
@mixin metro($column (ratio $ratio) ('gutter' $gutter) ('selector' $selector) $breakpoint $condition $media 'keep')
// $column: list | map
// $selector: string (child element selector, default "li")
// $condition: 'min' | 'max'
// $media: media types
// $breakpoint: map (e.g. small: 640px, medium: 768px, large: 1024px)

//=> {% elif componentName === "diamond_syntax" %}
@mixin diamond($column $shape 'tight' 'keep')
// $column: px | % | Integer (px, %: size; Integer: columns)
// $shape: 'diamond' | 'octagon'

//=> {% elif componentName === "anglededge_syntax" %}
@mixin angled-edge($edge $angle $color 'flip');
// $edge: top | bottom | both
// $angle: deg

//=> {% elif componentName === "justify_syntax" %}
@mixin justify($selector);

//=> {% elif componentName === "center_syntax" %}
@mixin center($selector)

//=> {% elif componentName === "chart_syntax" %}
@mixin chart($data $style ('bar-height' $bar-height) ('bar-gap' $bar-gap) ('steps' $steps) ('gutter' $gutter) ('animation' $animation-val) ('hide' $hide))
// $data: map. (color: data, color: data, ...)
// $style: 'bar' | 'column'
// $bar-gap: px | em. Required if mode is "bar".
// $bar-height: px | em
// $steps: list (step count)
// $animation-val: list (duration timing-function)
// $hide: list ('units' 'labels' 'numbers')

//=> {% elif componentName === "responsivetable_syntax" %}
// rp-table() for shorthand
@mixin responsive-table($style ('data' $data) $border-color ('breakpoint' $breakpoint) ('th-width' $th-width) ('count' $count)) { 
  @content;
}
// $style: 'flip-scroll' | 'scroll' | 'toggle' | 'stack'
// $data: list (<th> content, required for 'stack')
// $border-color: color (required for 'stack')
// $breakpoint: px | em | integer
// $th-width: % | px (optional, for 'stack')
// $count: integer (column count, required for 'toggle')

//=> {% elif componentName === "offcanvas_syntax" %}
@mixin off-canvas($style ('page' $page) ('nav' $nav) 'submenu' 'inside' $nav-size $direction $tops ('breakpoint' $breakpoint) $overlay-background-color $duration)
// $style: 'slide-in' | 'slide-along' | 'slide-out' | 'rotate-in' | 'rotate-out' | 'rotate-in-reverse' | 'scale-down' | 'scale-up' | 'open-door' | 'push' | 'reveal' | 'drawer'
// $tops: map (Required if style is 'drawer'. The top positions of the nav. e.g. (500px: 20px, 768px: 30px, 1025: 40px))
// For styles: 'slide-in', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'push' and 'drawer', 'nav' can be put inside 'page'.


//=> {% elif componentName === "validation_syntax" %}
@mixin validation($style $direction 'shake' ('speed' $speed) ('duration' $duration) 'default')
// $style: 'normal' | 'fade-in' | 'slide-in'
// $direction: left | right | top | bottom
// 'shake': shake the form element if user input is not correct
// $speed: s (animation speed)
// $duration: s (the time before the alert panel disappear, for 'slide-in' style)
// 'default': use default black/white theme

//=> {% elif componentName === "button_syntax" %}
@mixin button($style $background-color $active-color $selector $direction $duration $timing-function)
// $style: 'highlight' | 'simple' | 'slide' | 'ripple' | 'veil' | 'push' | 'cut' | 'bubble' | 'line-drawing'
// $direction: left, right, top, bottom, 'horizontal', 'vertical'
// $selector: . | # | [] | :: (You could change the button status by adding this selector)

//=> {% elif componentName === "parallelogram_syntax" %}
@mixin parallelogram($background-color $angle);
// $background-color: color
// $angle: deg

//=> {% elif componentName === "dropshadow_syntax" %}
@mixin drop-shadow($style $direction $color $shadow-size);
// $style: 'lifted' | 'raised' | 'perspective' | 'curve'
// $direction: 'left' | 'right' | 'top' | 'bottom' | 'horizontal' | 'vertical'

//=> {% elif componentName === "switch_syntax" %}
@mixin switch($style $size $color ('text' $text) ('border-radius' $border-radius))
// $style: 'toggle' | 'slider'
// $size: list | px | em (width height)
// $color: list | color ($default-color $active-color)
// $text: list (e.g. ('on' 'off'))
// $border-radius: px | em ...

//=> {% elif componentName === "pushtoggle_syntax" %}
@mixin push-toggle() {
  // Active styles go here
  @content;
}

//=> {% elif componentName === "checkbox_syntax" %}
@mixin checkbox() {
  // unchecked styles go here
  @content;
}

@mixin checkbox-active() {
  // checked styles go here
  @content;
}

//=> {% elif componentName === "inputfile_syntax" %}
@mixin input-file() {
  @content;
}

//=> {% elif componentName === "tab_syntax" %}
@mixin tab($style $count)
// $style: 'normal' | 'carousel' | 'customize'
// $count: tab count

@mixin tab-active($count)
// $count: tab count

@mixin tab-panel-active($count)
// $count: tab count

//=> {% elif componentName === "accordion_syntax" %}
@mixin accordion($selector $max-height $duration)

//=> {% elif componentName === "dropdown_syntax" %}
@mixin dropdown($style $selector $activate $direction $duration 'default')
// $style: 'display' | 'scale' | 'rotate'
// $selector: string (Dropdown content selector)
// $activate: 'hover' | 'click'
// 'default': use default styles

//=> {% elif componentName === "tooltip_syntax" %}
@mixin tooltip($direction $color ('content' $content) $border-radius)
// $direction: left | right | top | bottom
// $color: color (tooltip panel background color)
// $content: String (tooltip panel content, default: attr(data-tooltip))

//=> {% elif componentName === "flexmedia_syntax" %}
@mixin flex-media($selector $ratio)

//=> {% elif componentName === "fluidtype_syntax" %}
@mixin fluid-type($property $breakpoint);
// $property: list | string (font-size | margin | padding)
// $breakpoint: map

//=> {% elif componentName === "hidetext_syntax" %}
@mixin hide-text();
%hide-text {};

//=> {% elif componentName === "robreakpoint_syntax" %}
@mixin ro-breakpoint($media $condition $feature $breakpoint)
// $media: ('all' 'aural' 'braille' 'handheld' 'print' 'projection' 'screen' 'tty' 'tv' 'embossed')
// $condition: 'min' | 'max'
// $feature: 'width' | 'height'

//=> {% elif componentName === "atleast_syntax" %}
@mixin at-least($selector $count) {
  @content;
}

//=> {% elif componentName === "atmost_syntax" %}
@mixin at-most($selector $count) {
  @content;
}

//=> {% elif componentName === "equalto_syntax" %}
@mixin equal-to($selector $count) {
  @content;
}

//=> {% elif componentName === "between_syntax" %}
@mixin between($selector $count1 $count2) {
  @content;
}

//=> {% elif componentName === "contrast_syntax" %}
@function contrast($color ('light' $light) ('dark' $dark))

//=> {% elif componentName === "adjacent_syntax" %}
@function adjacent($color $count ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))
// $count: integer
// $saturation: percent
// $lightness: percent
// $scale: number

//=> {% elif componentName === "complementary_syntax" %}
@function complementary($color ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))
// $saturation: percent
// $lightness: percent
// $scale: number

//=> {% elif componentName === "splitcomplementary_syntax" %}
@function split-complementary($color $count ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))

//=> {% elif componentName === "triad_syntax" %}
@function triad($color $count ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))
// $count: integer
// $saturation: percent
// $lightness: percent
// $scale: number

//=> {% elif componentName === "rectangle_syntax" %}
@function rectangle($color $count ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))
// $count: integer
// $saturation: percent
// $lightness: percent
// $scale: number

//=> {% elif componentName === "square_syntax" %}
@function square($color $count ('saturation' $saturation) ('lightness' $lightness) ('scale' $scale))
// $count: integer
// $saturation: percent
// $lightness: percent
// $scale: number

//=> {% endif %}
//=> {% endmacro %}