{% macro get(componentName) %}
{% if componentName === "container_syntax" %}
@mixin container( (
  'container': px | em | rem | %,
  'gutter': px | em | rem | %,
  'align': 'left' | 'right' | 'center'
) )


{% elif componentName === "grid_syntax" %}
@mixin grid( (
  'layout': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px)
  'condition': 'min' | 'max',
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ...,
  'direction': 'LTR' | 'RTL',
  'keep': boolean
  ) )

{% elif componentName === "liquid_syntax" %}
@mixin liquid( (
  'layout': list | map, // ('auto' 200px) | (640px: ('auto' 200px), 900px: ('auto' 300px))
  'gutter': px | em | rem | %, 
  'selector': string | list, // 'li' | ('main' 'aside') 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': 'LTR' | 'RTL'
  ) )

{% elif componentName === "holygrail_syntax" %}
@mixin holy-grail( (
  'layout': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': string
  ) )
// $layout: list | map
// $condition: 'min' | 'max'
// $media: media types
// $breakpoints: map, e.g. (small: 640px, medium: 768px, large: 1024px)
// $direction: LTR | RTL

{% elif componentName === "gallery_syntax" %}
@mixin gallery( (
  'layout': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'direction': string,
  'keep': boolean
  ) )
// $layout: number | map
// $condition: 'min' | 'max'
// $media: media types
// $breakpoints: map, e.g. (small: 640px, medium: 768px, large: 1024px)
// $direction: LTR | RTL

{% elif componentName === "masonry_syntax" %}
@mixin masonry( (
  'layout': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ...,
  'keep': boolean
  ) )
// $layout: number | map
// $condition: 'min' | 'max'
// $media: media types
// $breakpoints: map, e.g. (small: 640px, medium: 768px, large: 1024px)

// *** fallback: IE9- *** //
.no-csscolumns {
  .masonry {
    text-align: center;
    > li {
      display: inline-block;
      vertical-align: top;
      width: 250px;
      margin: 0 20px 20px 0;
      text-align: left;
    }
  }
}

{% elif componentName === "metro_syntax" %}
@mixin metro( (
  'layout': list | map, // (3 5 4) | (640px: ( (3 5) (1) ), 900px: (3 5 4))
  'ratio': $ratio, 
  'gutter': px | em | rem | %, 
  'selector': string, 
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px) 
  'condition': 'min' | 'max', 
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'keep': boolean
  ) )
// $layout: list | map
// $condition: 'min' | 'max'
// $media: media types
// $breakpoints: map, e.g. (small: 640px, medium: 768px, large: 1024px)

{% elif componentName === "diamond_syntax" %}
@mixin diamond( ( 
  'layout': $count | $size, 
  'shape': $shape, // 'diamond' | 'octagon'
  'tight': false, 
  'keep': boolean
) )

{% elif componentName === "anglededges_syntax" %}
@mixin angled-edges( (
  'edge': $edges, 
  'angle': $angle,
  'color': $edge-color,
  'flip': $flip
) );
// $edges: top | bottom | both
// $edge-color: deg

{% elif componentName === "justify_syntax" %}
@mixin justify( (
  'selector': $selector
) )

{% elif componentName === "center_syntax" %}
@mixin center( (
  'selector': $selector
) )

{% elif componentName === "chart_syntax" %}
@mixin chart( (
  'data': $data,
  'type': $type,
  'bar-height': $bar-height, 
  'bar-gap': $bar-gap, 
  'steps': $step-scale $step-full, 
  'gutter': px | em | rem | %, 
  'animation': $animation-val, 
  'hide': $hide
) )
// $data: map. (color: data, color: data, ...)
// $type: bar | column
// $bar-gap: px | em. Required if mode is "bar".
// $bar-height: px | em
// $steps: list. (step count)

{% elif componentName === "responsivetable_syntax" %}
// rp-table() for shorthand
@mixin responsive-table( (
  'style': $style,
  'data': $data, 
  'color': $border-color, 
  'breakpoint': $breakpoint,
  'th-width': $th-width,
  'count': $count
) ) { 
  @content;
}
// $style: flip-scroll | scroll | toggle | stack
// $data: list. (<th> content)
// $count: num. (column count)

{% elif componentName === "offcanvas_syntax" %}
@mixin off-canvas( (
  'style': $style,
  'nav': $nav,
  'submenu': $submenu,
  'nav-size': $nav-size,
  'direction': string,
  'tops': $tops,
  'breakpoint': map, // ('small': 640px, 'medium': 768px, 'large': 1024px)
  'overlay-color': $overlay-color,
  'duration': $duration
) )
// $style: slide-in | slide-along | slide-out | rotate-in | rotate-out | rotate-in-reverse | scale-down | scale-up | open-door | push | reveal | drawer

// For modes: slide-in, rotate-in, rotate-out, rotate-in-reverse, push and drawer, put nav inside ".page".
// For modes: slide-along, slide-out, scale-down, scale-up, open-door and reveal, put nav outside ".page", after the checkbox.

{% elif componentName === "validation_syntax" %}
@mixin validation( (
  'style': $style, 
  'direction': string,
  'shake': $shake,
  'z-index': $z-index,
  'speed': $speed,
  'duration': $duration,
  'default': $default
) )
// $style: 'normal' | 'fade-in' | 'slide-in'
// $direction: left | right | top | bottom

{% elif componentName === "button_syntax" %}
@mixin button( (
  'style': $style,
  'color': $background-color $active-color,
  'selector': string, 
  'direction': string,
  'duration': $duration, 
  'timing-function': $timing-function
) )
// $padding: string. e.g. "5px 10px"
// style: 'highlight' | 'simple' | 'slide' | 'ripple' | 'veil' | 'push' | 'cut' | 'bubble' | 'line-drawing'
// direction: left, right, top, bottom, 'horizontal', 'vertical'
// selector: class | id | property | pseudo. You could change the button status by adding this selector.

{% elif componentName === "parallelogram_syntax" %}
@mixin parallelogram( (
  'color': $color,
  'angle': $angle
) )
// $color: color
// $angle: deg

{% elif componentName === "dropshadow_syntax" %}
@mixin drop-shadow( (
  'style': $style, 
  'direction': string,
  'color': $color, 
  'shadow-size': $shadow-size
) )
// $style: 'lifted' | 'raised' | 'perspective' | 'curve'
// $direction: left | right | top | bottom | 'horizontal' | 'vertical'

{% elif componentName === "switch_syntax" %}
@mixin switch( (
  'style': $style, 
  'color': $color, 
  'size': $size, 
  'text' $text,
  'border-radius': $border-radius
) )
// $style: 'toggle' | 'slider'
// $size: px | em
// $color: color
// $text: list. e.g. ('on' 'off') 

{% elif componentName === "pushtoggle_syntax" %}
@mixin push-toggle() {
  // Active styles go here
  @content;
}

{% elif componentName === "checkbox_syntax" %}
@mixin checkbox() {
  // unchecked styles go here
  @content;
}

@mixin checkbox-active() {
  // checked styles go here
  @content;
}

{% elif componentName === "inputfile_syntax" %}
@mixin input-file() {
  @content;
}

{% elif componentName === "tab_syntax" %}
@mixin tab( (
  'style': $style,
  'count': $count 
) )
// $count: tab count
// $style: 'normal' | 'carousel' | 'customize'

@mixin tab-active((
  'count': $count
))
// $count: tab count

@mixin tab-panel-active((
  'count': $count
))
// $count: tab count

{% elif componentName === "accordion_syntax" %}
@mixin accordion( (
  'selector': string, 
  'max-height': $max-height, 
  'duration': $duration
) )

{% elif componentName === "dropdown_syntax" %}
@mixin dropdown( (
  'style': $style,
  'selector': string, 
  'activate': $activate, 
  'direction': string,
  'duration': $duration, 
  'default': $default
) )
// $selector: string. Dropdown content selector.
// $activate: 'hover' | 'click'
// $style: 'display' | 'scale' | 'rotate'
// default: use default styles

{% elif componentName === "tooltip_syntax" %}
@mixin tooltip( (
  'position': $position,
  'color': $color, 
  'content': $content,
  'border-radius': $border-radius
) )
// $position: left | right | top | bottom
// $width(optional): px | em
// $height(optional): px | em
// radius (0.22em), adjust it using "$ro-tooltip-radius: your value;")

{% elif componentName === "flexmedia_syntax" %}
@mixin flex-media( (
  'ratio': $ratio,
  'selector': $selector
) )

{% elif componentName === "fluidtype_syntax" %}
@mixin fluid-type( (
  'property': $property, 
  'breakpoint': $breakpoint
) )
// $property: font-size | margin | padding
// $data: map

{% elif componentName === "hidetext_syntax" %}
@mixin hide-text();
%hide-text {};

{% elif componentName === "robreakpoint_syntax" %}
@mixin ro-breakpoint( (
  'breakpoint': $breakpoint,
  'condition': 'min' | 'max',
  'media': 'all' | 'aural' | 'braille' | 'handheld' | 'print' | 'projection' | 'screen' | 'tty' | 'tv' | 'embossed' | ..., 
  'feature': $feature
) )

{% elif componentName === "atleast_syntax" %}
@mixin at-least( (
  'selector': string, 
  'count': $count
) ) {
  @content;
}

{% elif componentName === "atmost_syntax" %}
@mixin at-most( (
  'selector': string, 
  'count': $count
) ) {
  @content;
}

{% elif componentName === "equalto_syntax" %}
@mixin equal-to( (
  'selector': string, 
  'count': $count
) ) {
  @content;
}

{% elif componentName === "between_syntax" %}
@mixin between( (
  'selector': string, 
  'count': $count-min $count-max) {
  @content;
}

{% elif componentName === "contrast_syntax" %}
@function contrast( (
  'color': $color,
  'light': $light, 
  'dark': $dark
) )

{% elif componentName === "adjacent_syntax" %}
@function adjacent( (
  'scale': $scale, 
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )
// $order: integer
// $saturation: percent
// $lightness: percent
// $dist(distribution): number

{% elif componentName === "complementary_syntax" %}
@function complementary( (
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )
// $order: integer
// $saturation: percent
// $lightness: percent
// $dist(distribution): number

{% elif componentName === "splitcomplementary_syntax" %}
@function split-complementary( (
  'scale': $scale, 
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )

{% elif componentName === "triad_syntax" %}
@function triad( (
  'scale': $scale, 
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )
// $order: integer
// $saturation: percent
// $lightness: percent
// $dist(distribution): number

{% elif componentName === "rectangle_syntax" %}
@function rectangle( (
  'scale': $scale, 
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )
// $order: integer
// $saturation: percent
// $lightness: percent
// $dist(distribution): number

{% elif componentName === "square_syntax" %}
@function square( (
  'scale': $scale, 
  'color': $color, 
  'saturation': $saturation,
  'lightness': $lightness,
  'angle': $angle
) )
// $order: integer
// $saturation: percent
// $lightness: percent
// $dist(distribution): number

{% endif %}
{% endmacro %}